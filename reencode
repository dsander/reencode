#!/usr/bin/env ruby

require 'pp'
require 'mediainfo'
require 'active_record'
require 'active_support'
require 'active_support/core_ext/numeric'
require 'shellwords'
require 'fileutils'
require 'thor'
require 'benchmark'

require_relative 'lib/qualities'
require_relative 'lib/medium'
require_relative 'lib/command'
require_relative 'lib/filecache'
require_relative 'lib/media_file'

$stopping = false

%w(INT TERM QUIT).each do |signal|
  Signal.trap(signal) { $stopping = true }
end

class Reencode
  def self.work(options)
    Dir.glob(File.join(options[:path], '/**/*.{mkv,avi,mp4}')).sort.each do |f|
      path = f.gsub(options[:path], '').split('/').first
      begin
        file = MediaFile.new(f)
        next if file.hevc || file.failed?
        next unless file.worthit?
        next if file.mtime > (Time.now - (30*24*3600)).to_i

        c = Command.new(file, hardware_decode: options['hardware_decode'])
        next if File.exist?(c.destination)

        Reencode.shell.say File.basename(f), :green
        Reencode.shell.say "  Estimations:", :yellow
        Reencode.shell.say "    Freed space  : #{Reencode.kb_to_human(file.size - file.guessed_size)}"
        Reencode.shell.say "    Encoding time: #{file.guessed_encoding_time.to_i} seconds"

        yield file, c if block_given?

        if $stopping
          c.cleanup!
          break
        end
      rescue StandardError => e
        c.cleanup! if c
        Reencode.shell.say "Error processing '#{f}':", :red
        Reencode.shell.say e.message
        Reencode.shell.say e.backtrace.join("\n")
        break if $stopping
      end
    end
  end

  def self.shell
    @shell ||= Thor::Shell::Color.new
  end

  def self.kb_to_human(kb)
    ActiveSupport::NumberHelper.number_to_human_size(kb.kilobyte)
  end
end

class Cli < Thor
  desc "perform PATH", "Scans the directory recursively and re-encodes all found videos"
  method_option :inplace, type: :boolean, default: false, desc: "Replaces the source file with the re-encoded"
  method_option :hardware_decode, type: :boolean, default: false, desc: "Use hardware accelerated decoding method"
  def perform(path)
    Reencode.work(options.merge(path: path)) do |file, c|
      next unless file.lock!
      time = Benchmark.realtime do
        c.execute
      end
      Reencode.shell.say "  Measurements:", :yellow
      Reencode.shell.say "    Freed space  : #{Reencode.kb_to_human(file.size - c.destination_size)} GB"
      Reencode.shell.say "    Encoding time: #{time.to_i} seconds"
      FileUtils.mv(c.destination, file.path) if options['inplace']
      file.unlock!
    end
  end

  desc "analyze PATH", "Scans the directory recursively and analyzes the potential saved space"
  def analyze(path)
    time = saved = 0
    Reencode.work(path: path) do |file, c|
      time += file.guessed_encoding_time
      saved += file.size - file.guessed_size
    end

    Reencode.shell.say "\n-------------------"
    Reencode.shell.say "Total estimations:", :green
    Reencode.shell.say "  Freed space  : #{Reencode.kb_to_human(saved)}"
    Reencode.shell.say "  Encoding time: #{(time / 3600.0 / 24.0).round(2)} days"
  end
end

Cli.start
